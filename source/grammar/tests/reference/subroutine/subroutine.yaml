# indent w/ 2 spaces
source: |
  def test_sub1(int[5] i, qubit[2] q1, qreg q2[5]) -> int[10] {
    int[10] result;
    if (result == 2) return 1 + result;
    return result;
  }
  def test_sub2(int[5] i, bit[2] b, creg c[3]) {
    for j in {2, 3}
      i += j;
    return i+1;
  }
reference: |
  program
    header
    globalStatement
      subroutineDefinition
        def
        test_sub1
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
              i
          ,
          anyTypeArgument
            quantumArgument
              qubit
              designator
                [
                expression
                  expressionTerminator
                    2
                ]
              q1
          ,
          anyTypeArgument
            quantumArgument
              qreg
              q2
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
        )
        returnSignature
          ->
          classicalType
            singleDesignatorType
              int
            designator
              [
              expression
                expressionTerminator
                  10
              ]
        subroutineBlock
          {
          statement
            classicalDeclarationStatement
              classicalDeclaration
                singleDesignatorDeclaration
                  singleDesignatorType
                    int
                  designator
                    [
                    expression
                      expressionTerminator
                        10
                    ]
                  result
              ;
          statement
            branchingStatement
              if
              (
              expression
                logicalAndExpression
                  bitOrExpression
                    xOrExpression
                      bitAndExpression
                        equalityExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  multiplicativeExpression
                                    powerExpression
                                      expressionTerminator
                                        result
                          ==
                          comparisonExpression
                            bitShiftExpression
                              additiveExpression
                                multiplicativeExpression
                                  powerExpression
                                    expressionTerminator
                                      2
              )
              programBlock
                controlDirective
                  returnStatement
                    return
                    expression
                      logicalAndExpression
                        bitOrExpression
                          xOrExpression
                            bitAndExpression
                              equalityExpression
                                comparisonExpression
                                  bitShiftExpression
                                    additiveExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          powerExpression
                                            expressionTerminator
                                              1
                                      +
                                      multiplicativeExpression
                                        powerExpression
                                          expressionTerminator
                                            result
                    ;
          returnStatement
            return
            expression
              expressionTerminator
                result
            ;
          }
    globalStatement
      subroutineDefinition
        def
        test_sub2
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
              i
          ,
          anyTypeArgument
            classicalArgument
              bit
              designator
                [
                expression
                  expressionTerminator
                    2
                ]
              b
          ,
          anyTypeArgument
            classicalArgument
              creg
              c
              designator
                [
                expression
                  expressionTerminator
                    3
                ]
        )
        subroutineBlock
          {
          statement
            loopStatement
              loopSignature
                for
                j
                in
                setDeclaration
                  {
                  expressionList
                    expression
                      expressionTerminator
                        2
                    ,
                    expression
                      expressionTerminator
                        3
                  }
              programBlock
                statement
                  assignmentStatement
                    classicalAssignment
                      i
                      assignmentOperator
                        +=
                      expression
                        expressionTerminator
                          j
                    ;
          returnStatement
            return
            expression
              logicalAndExpression
                bitOrExpression
                  xOrExpression
                    bitAndExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              additiveExpression
                                multiplicativeExpression
                                  powerExpression
                                    expressionTerminator
                                      i
                              +
                              multiplicativeExpression
                                powerExpression
                                  expressionTerminator
                                    1
            ;
          }
