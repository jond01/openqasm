# indent w/ 2 spaces
source: |
  bit[2] a;
  creg b[2];
  qubit[3] q;
  int[10] x = 12;
  a[0] = b[1];
  x += int[10](a[1]);
  measure q[1] -> a[0];
  a = measure q[1:2];
  b = a == 0;
reference: |
  program
    header
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            bit
            designator
              [
              expression
                expressionTerminator
                  2
              ]
            a
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            creg
            b
            designator
              [
              expression
                expressionTerminator
                  2
              ]
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qubit
          designator
            [
            expression
              expressionTerminator
                3
            ]
          q
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          singleDesignatorDeclaration
            singleDesignatorType
              int
            designator
              [
              expression
                expressionTerminator
                  10
              ]
            x
            equalsExpression
              =
              expression
                expressionTerminator
                  12
        ;
    statement
      assignmentStatement
        classicalAssignment
          a
          designator
            [
            expression
              expressionTerminator
                0
            ]
          assignmentOperator
            =
          expression
            expressionTerminator
              expressionTerminator
                b
              [
              expression
                expressionTerminator
                  1
              ]
        ;
    statement
      assignmentStatement
        classicalAssignment
          x
          assignmentOperator
            +=
          expression
            expressionTerminator
              builtInCall
                castOperator
                  classicalType
                    singleDesignatorType
                      int
                    designator
                      [
                      expression
                        expressionTerminator
                          10
                      ]
                (
                expressionList
                  expression
                    expressionTerminator
                      expressionTerminator
                        a
                      [
                      expression
                        expressionTerminator
                          1
                      ]
                )
        ;
    statement
      assignmentStatement
        quantumMeasurementAssignment
          quantumMeasurement
            measure
            indexIdentifier
              q
              [
              expressionList
                expression
                  expressionTerminator
                    1
              ]
          ->
          indexIdentifier
            a
            [
            expressionList
              expression
                expressionTerminator
                  0
            ]
        ;
    statement
      assignmentStatement
        quantumMeasurementAssignment
          indexIdentifier
            a
          =
          quantumMeasurement
            measure
            indexIdentifier
              q
              rangeDefinition
                [
                expression
                  expressionTerminator
                    1
                :
                expression
                  expressionTerminator
                    2
                ]
        ;
    statement
      assignmentStatement
        classicalAssignment
          b
          assignmentOperator
            =
          expression
            logicalAndExpression
              bitOrExpression
                xOrExpression
                  bitAndExpression
                    equalityExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              multiplicativeExpression
                                powerExpression
                                  expressionTerminator
                                    a
                      equalityOperator
                        ==
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              powerExpression
                                expressionTerminator
                                  0
        ;
